const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

    export const chatSession = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate a study material for java having level of difficulty as easy.list each chapter with a short summary under it.list of topicsin each chapter in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Okay, here's a study material outline for Java, geared towards beginners (easy difficulty), with chapter summaries and a JSON format list of topics for each chapter.\n\n**Study Material: Introduction to Java Programming (Easy Level)**\n\nThis material is designed to guide you through the fundamentals of Java programming. It assumes no prior programming experience.\n\n**Chapter 1: Getting Started with Java**\n\n*   **Summary:** This chapter introduces you to the world of Java and its importance. You'll learn what Java is, why it's used, and how to set up your development environment to start writing Java code.\n\n    * **Topics:**\n        ```json\n        {\n           \"topics\": [\n                {\"name\": \"What is Java?\", \"description\":\"Introduction to the Java programming language\"},\n                {\"name\":\"Why Use Java?\",\"description\":\"Applications and use cases of Java.\"},\n                {\"name\": \"Setting Up the Environment\", \"description\":\"Installing JDK and configuring your development environment.\"},\n                 {\"name\":\"First Java Program\",\"description\": \"Writing your first Hello World program\"}\n             ]\n        }\n        ```\n\n**Chapter 2: Understanding the Basics**\n\n*   **Summary:** This chapter dives into the fundamental building blocks of Java. You'll learn about data types, variables, operators, and how to perform simple calculations.\n\n    * **Topics:**\n        ```json\n        {\n            \"topics\": [\n                 {\"name\": \"Data Types\", \"description\":\"Understanding primitive data types (int, float, char, boolean, etc.).\"},\n                {\"name\": \"Variables\", \"description\":\"Declaring and initializing variables.\"},\n                {\"name\": \"Operators\", \"description\":\"Arithmetic, assignment, comparison, and logical operators.\"},\n                {\"name\": \"Basic Calculations\", \"description\":\"Performing simple mathematical calculations.\"}\n             ]\n         }\n        ```\n\n**Chapter 3: Control Flow**\n\n*   **Summary:** Here, you'll learn how to control the execution flow of your programs. You'll explore conditional statements (if-else) and looping structures (for, while).\n\n    * **Topics:**\n        ```json\n        {\n           \"topics\":[\n                {\"name\": \"Conditional Statements (if-else)\", \"description\":\"Making decisions in your program.\"},\n               {\"name\":\"Looping (for and while)\", \"description\":\"Repeating blocks of code using loops.\"}\n            ]\n        }\n        ```\n\n**Chapter 4: Working with Strings**\n\n*  **Summary:** This chapter focuses on how to work with text in Java. You will learn how to create, manipulate and compare strings and perform basic string operations.\n\n    * **Topics:**\n          ```json\n          {\n             \"topics\":[\n                  {\"name\": \"Creating Strings\", \"description\":\"Declaring and initializing strings.\"},\n                 {\"name\": \"String Concatenation\", \"description\":\"Joining strings together.\"},\n                  {\"name\":\"String Manipulation\",\"description\":\"Common operations like length, substring, uppercase and lowercase.\"},\n                  {\"name\":\"Comparing Strings\",\"description\":\"Checking for equality between strings\"}\n              ]\n          }\n          ```\n\n**Chapter 5: Arrays**\n\n*   **Summary:** Arrays allow you to store multiple values of the same type. In this chapter, you'll learn how to declare, initialize, and access elements in arrays.\n\n    * **Topics:**\n        ```json\n        {\n            \"topics\":[\n                {\"name\":\"Declaring Arrays\", \"description\":\"Creating arrays in Java.\"},\n                {\"name\":\"Initializing Arrays\", \"description\":\"Assigning values to array elements.\"},\n                {\"name\":\"Accessing Array Elements\",\"description\":\"Retrieving elements from an array using their index.\"},\n                {\"name\":\"Looping through arrays\",\"description\":\"Using loops to iterate over array elements.\"}\n                ]\n        }\n        ```\n\n**Chapter 6: Introduction to Methods**\n\n*   **Summary:** Methods are blocks of reusable code. This chapter introduces the concept of methods, how to define them, and how to call them from other parts of your program.\n\n     * **Topics:**\n        ```json\n        {\n             \"topics\":[\n                {\"name\": \"Defining Methods\", \"description\":\"Creating your own methods.\"},\n                {\"name\": \"Calling Methods\", \"description\":\"Using methods in your code.\"},\n                {\"name\": \"Method Parameters and Return Values\",\"description\":\"Passing data into and receiving data from methods.\"}\n             ]\n        }\n        ```\n\n**Chapter 7: Simple Input and Output**\n\n*   **Summary:** This chapter focuses on how to interact with the user. You'll learn how to display output to the console and how to receive input from the user.\n\n    * **Topics:**\n        ```json\n        {\n            \"topics\":[\n                  {\"name\": \"Printing Output (System.out.println)\", \"description\":\"Displaying information to the console.\"},\n                 {\"name\": \"Getting Input (Scanner)\", \"description\":\"Reading input from the user.\"}\n                ]\n         }\n        ```\n\n**Chapter 8: Practice and Problem Solving**\n\n*   **Summary:** This is a practice chapter where you will solve some basic programming problems using the concepts learned in the previous chapters. This will solidify your understanding.\n\n    * **Topics:**\n        ```json\n        {\n            \"topics\":[\n                 {\"name\":\"Practice Exercises\",\"description\":\"Solving simple coding problems.\"},\n                {\"name\":\"Debugging\",\"description\":\"Learn how to identify and fix issues in code.\"}\n             ]\n        }\n        ```\n\n**Important Notes:**\n\n*   **Hands-on Practice:** This material emphasizes hands-on coding. After each concept, try writing and running your own code.\n*   **Online Resources:** Use online Java tutorials, documentation, and forums for additional learning.\n*   **Patience:** Programming requires practice. Be patient and persistent, and you'll make progress.\n\nThis structure should provide a solid foundation for a beginner learning Java. Let me know if you have any other questions.\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "generate a study material for java having level of difficulty as easy.list each chapter with a short summary under it.list of topicsin each chapter in JSON format..iprovide full result in json format(summary,chapter_tilte,topics)"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"studyMaterial\": {\n    \"title\": \"Introduction to Java Programming (Easy Level)\",\n    \"description\": \"This material is designed to guide you through the fundamentals of Java programming. It assumes no prior programming experience.\",\n    \"chapters\": [\n      {\n        \"chapter_title\": \"Chapter 1: Getting Started with Java\",\n        \"summary\": \"This chapter introduces you to the world of Java and its importance. You'll learn what Java is, why it's used, and how to set up your development environment to start writing Java code.\",\n        \"topics\": {\n          \"topics\": [\n            { \"name\": \"What is Java?\", \"description\": \"Introduction to the Java programming language\" },\n            { \"name\": \"Why Use Java?\", \"description\": \"Applications and use cases of Java.\" },\n            {\n              \"name\": \"Setting Up the Environment\",\n              \"description\": \"Installing JDK and configuring your development environment.\"\n            },\n            { \"name\": \"First Java Program\", \"description\": \"Writing your first Hello World program\" }\n          ]\n        }\n      },\n      {\n        \"chapter_title\": \"Chapter 2: Understanding the Basics\",\n        \"summary\": \"This chapter dives into the fundamental building blocks of Java. You'll learn about data types, variables, operators, and how to perform simple calculations.\",\n        \"topics\": {\n          \"topics\": [\n            {\n              \"name\": \"Data Types\",\n              \"description\": \"Understanding primitive data types (int, float, char, boolean, etc.).\"\n            },\n            { \"name\": \"Variables\", \"description\": \"Declaring and initializing variables.\" },\n            {\n              \"name\": \"Operators\",\n              \"description\": \"Arithmetic, assignment, comparison, and logical operators.\"\n            },\n            {\n              \"name\": \"Basic Calculations\",\n              \"description\": \"Performing simple mathematical calculations.\"\n            }\n          ]\n        }\n      },\n      {\n        \"chapter_title\": \"Chapter 3: Control Flow\",\n        \"summary\": \"Here, you'll learn how to control the execution flow of your programs. You'll explore conditional statements (if-else) and looping structures (for, while).\",\n        \"topics\": {\n          \"topics\": [\n            {\n              \"name\": \"Conditional Statements (if-else)\",\n              \"description\": \"Making decisions in your program.\"\n            },\n            {\n              \"name\": \"Looping (for and while)\",\n              \"description\": \"Repeating blocks of code using loops.\"\n            }\n          ]\n        }\n      },\n      {\n        \"chapter_title\": \"Chapter 4: Working with Strings\",\n        \"summary\": \"This chapter focuses on how to work with text in Java. You will learn how to create, manipulate and compare strings and perform basic string operations.\",\n        \"topics\": {\n          \"topics\": [\n            { \"name\": \"Creating Strings\", \"description\": \"Declaring and initializing strings.\" },\n            {\n              \"name\": \"String Concatenation\",\n              \"description\": \"Joining strings together.\"\n            },\n            {\n              \"name\": \"String Manipulation\",\n              \"description\": \"Common operations like length, substring, uppercase and lowercase.\"\n            },\n            {\n              \"name\": \"Comparing Strings\",\n              \"description\": \"Checking for equality between strings\"\n            }\n          ]\n        }\n      },\n      {\n        \"chapter_title\": \"Chapter 5: Arrays\",\n        \"summary\": \"Arrays allow you to store multiple values of the same type. In this chapter, you'll learn how to declare, initialize, and access elements in arrays.\",\n        \"topics\": {\n          \"topics\": [\n            { \"name\": \"Declaring Arrays\", \"description\": \"Creating arrays in Java.\" },\n            {\n              \"name\": \"Initializing Arrays\",\n              \"description\": \"Assigning values to array elements.\"\n            },\n            {\n              \"name\": \"Accessing Array Elements\",\n              \"description\": \"Retrieving elements from an array using their index.\"\n            },\n            {\n              \"name\": \"Looping through arrays\",\n              \"description\": \"Using loops to iterate over array elements.\"\n            }\n          ]\n        }\n      },\n       {\n        \"chapter_title\": \"Chapter 6: Introduction to Methods\",\n        \"summary\": \"Methods are blocks of reusable code. This chapter introduces the concept of methods, how to define them, and how to call them from other parts of your program.\",\n        \"topics\": {\n          \"topics\": [\n            { \"name\": \"Defining Methods\", \"description\": \"Creating your own methods.\" },\n            { \"name\": \"Calling Methods\", \"description\": \"Using methods in your code.\" },\n            {\n              \"name\": \"Method Parameters and Return Values\",\n              \"description\": \"Passing data into and receiving data from methods.\"\n            }\n          ]\n        }\n      },\n      {\n        \"chapter_title\": \"Chapter 7: Simple Input and Output\",\n        \"summary\": \"This chapter focuses on how to interact with the user. You'll learn how to display output to the console and how to receive input from the user.\",\n        \"topics\": {\n          \"topics\": [\n            {\n              \"name\": \"Printing Output (System.out.println)\",\n              \"description\": \"Displaying information to the console.\"\n            },\n            {\n              \"name\": \"Getting Input (Scanner)\",\n              \"description\": \"Reading input from the user.\"\n            }\n          ]\n        }\n      },\n       {\n        \"chapter_title\": \"Chapter 8: Practice and Problem Solving\",\n        \"summary\": \"This is a practice chapter where you will solve some basic programming problems using the concepts learned in the previous chapters. This will solidify your understanding.\",\n        \"topics\": {\n          \"topics\": [\n            {\n              \"name\": \"Practice Exercises\",\n              \"description\": \"Solving simple coding problems.\"\n            },\n             {\n              \"name\": \"Debugging\",\n              \"description\": \"Learn how to identify and fix issues in code.\"\n            }\n\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n"},
          ],
        },
      ],
    });
  

    export const chaptercontent = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate study material for each chapter ,include all topics in the content,provide output in HTML format(do not include any tags such as head,body) the chapters:{\n      \"chapter_title\": \"Chapter 1: Advanced State Management\",\n      \"summary\": \"This chapter explores advanced state management patterns beyond basic useState and useContext hooks. It covers the use of Redux, Zustand, or Recoil for complex application state, middleware for handling asynchronous operations, and strategies for state normalization.\",\n      \"topics\": [\n        \"Redux Toolkit\",\n        \"Zustand\",\n        \"Recoil\",\n        \"Middleware\",\n        \"State Normalization\",\n        \"Immutable Data Structures\"\n      ]\n    },\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```html\n    <div>\n        <h2>Chapter 1: Advanced State Management</h2>\n        <p><strong>Summary:</strong> This chapter explores advanced state management patterns beyond basic useState and useContext hooks. It covers the use of Redux, Zustand, or Recoil for complex application state, middleware for handling asynchronous operations, and strategies for state normalization.</p>\n\n        <h3>Topics:</h3>\n        \n        <h4>Redux Toolkit</h4>\n        <ul>\n            <li><strong>What is Redux Toolkit?</strong> Redux Toolkit is the official, opinionated, batteries-included toolset for efficient Redux development. It simplifies common Redux patterns.</li>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li><strong><code>configureStore</code>:</strong> Simplifies store creation with sensible defaults.</li>\n                    <li><strong><code>createSlice</code>:</strong> Creates reducers, actions, and action creators automatically.</li>\n                    <li><strong><code>createAsyncThunk</code>:</strong> Handles asynchronous logic in Redux actions.</li>\n                    <li><strong>Immutability:</strong> Encourages working with immutable data structures.</li>\n                </ul>\n            </li>\n             <li><strong>Study Points:</strong>\n                 <ul>\n                  <li>Understand the benefits of using Redux Toolkit over vanilla Redux.</li>\n                    <li>Learn to set up a Redux store using <code>configureStore</code>.</li>\n                     <li>Practice creating slices with <code>createSlice</code> for different parts of your application state.</li>\n                    <li>Understand how to dispatch actions and use selectors to access the store.</li>\n                     <li>Learn how to manage asynchronous actions with <code>createAsyncThunk</code> and handle loading and error states.</li>\n                 </ul>\n            </li>\n        </ul>\n        \n          <h4>Zustand</h4>\n        <ul>\n            <li><strong>What is Zustand?</strong> Zustand is a small, fast and scalable bearbones state-management solution using simplified flux principles.</li>\n            <li><strong>Key Concepts:</strong>\n                <ul>\n                    <li><strong>Centralized Store:</strong> Creates a single store to hold application state.</li>\n                    <li><strong>Simple API:</strong> Uses a simple hook-based API for accessing and updating state.</li>\n                     <li><strong>No Boilerplate:</strong>  Minimal configuration and boilerplate code.</li>\n                </ul>\n            </li>\n             <li><strong>Study Points:</strong>\n                 <ul>\n                    <li>Understand the basic concepts and principles of Zustand.</li>\n                    <li>Learn to create a Zustand store with initial state.</li>\n                    <li>Practice reading and updating the state using the Zustand hook.</li>\n                    <li>Understand the concept of slices in Zustand, even if not explicitly named like in Redux.</li>\n                 </ul>\n            </li>\n        </ul>\n        \n        <h4>Recoil</h4>\n        <ul>\n            <li><strong>What is Recoil?</strong> Recoil is a state management library created by Facebook/Meta specifically for React applications, known for its atomic state management approach.</li>\n            <li><strong>Key Concepts:</strong>\n                 <ul>\n                     <li><strong>Atoms:</strong> Represent units of state that components can subscribe to.</li>\n                     <li><strong>Selectors:</strong> Derive data from atoms in a reactive manner.</li>\n                    <li><strong>Component-Centric:</strong> State and logic is closely tied to React components.</li>\n                </ul>\n            </li>\n            <li><strong>Study Points:</strong>\n                  <ul>\n                    <li>Understand the concepts of Atoms and Selectors in Recoil.</li>\n                    <li>Practice creating and consuming Recoil atoms in React components.</li>\n                   <li>Learn how to derive data from atoms using selectors and improve the re-rendering process</li>\n                    <li>Learn best practices for Recoil state management including writing functions that can change the value of the atoms.</li>\n                 </ul>\n            </li>\n        </ul>\n\n       <h4>Middleware</h4>\n       <ul>\n           <li><strong>What is Middleware?</strong> Middleware provides a way to intercept and modify actions or requests before they reach the reducer or the data.</li>\n           <li><strong>Key Concepts:</strong>\n               <ul>\n                   <li><strong>Asynchronous Operations:</strong> Middleware handles asynchronous actions like API calls.</li>\n                   <li><strong>Logging and Debugging:</strong> Middleware can be used to log actions or debug application flow.</li>\n                   <li><strong>Action Transformation:</strong> Middleware can modify actions before they reach the reducer.</li>\n               </ul>\n           </li>\n           <li><strong>Study Points:</strong>\n               <ul>\n                   <li>Understand the role of middleware in a state management context.</li>\n                   <li>Learn how to create custom middleware functions for different state management libraries (Redux Thunk, Redux Saga or custom).</li>\n                   <li>Implement middleware for actions that performs API calls and handles loading and error states.</li>\n                   <li>Understand the different approaches and patterns to middleware (e.g. Thunk vs Saga).</li>\n               </ul>\n           </li>\n       </ul>\n\n        <h4>State Normalization</h4>\n        <ul>\n            <li><strong>What is State Normalization?</strong> State normalization is a technique used to structure complex, nested data in a more efficient and manageable way.</li>\n             <li><strong>Key Concepts:</strong>\n                 <ul>\n                    <li><strong>Entities:</strong>  Data is organized by type, like 'users', 'posts', etc.</li>\n                    <li><strong>IDs:</strong>  Each entity is assigned a unique ID and stored in a lookup table.</li>\n                    <li><strong>References:</strong> Relationships between entities are represented by storing IDs.</li>\n                 </ul>\n            </li>\n            <li><strong>Study Points:</strong>\n                <ul>\n                    <li>Understand the benefits of state normalization in complex data structures, especially when state changes frequently.</li>\n                    <li>Practice organizing nested data into normalized forms using IDs and lookup tables.</li>\n                    <li>Learn to retrieve data from normalized state using selectors.</li>\n                    <li>Practice using functions that can read data from the store in a normalized way to display in the UI.</li>\n                </ul>\n            </li>\n        </ul>\n\n        <h4>Immutable Data Structures</h4>\n        <ul>\n             <li><strong>What are Immutable Data Structures?</strong> Immutable data structures are structures that cannot be modified after creation. Instead, new versions are created when changes are made, this prevents unexpected side effects and bugs.</li>\n            <li><strong>Key Concepts:</strong>\n                 <ul>\n                    <li><strong>Persistence:</strong>  Existing structures are not modified and a new one is returned with the desired modification.</li>\n                    <li><strong>Performance:</strong> Can improve performance for large datasets and frequent changes.</li>\n                    <li><strong>Simplicity:</strong>  Can simplify debugging and reduce unintended side effects.</li>\n                 </ul>\n            </li>\n            <li><strong>Study Points:</strong>\n                <ul>\n                    <li>Understand the concept of immutability in state management.</li>\n                   <li>Learn how to create and update objects and arrays immutably using methods such as the spread operator and immutability helpers.</li>\n                    <li>Learn how using immutable updates simplifies state management.</li>\n                    <li>Learn how state management libraries handle immutability.</li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n```\n"},
          ],
        },
      ],
    });

   export  const GenerateStudyType = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate the flashcards on the topic:Data Science in JSON format with front back content maximum 15"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n[\n  {\n    \"front\": \"What is Data Science?\",\n    \"back\": \"An interdisciplinary field that uses scientific methods, processes, algorithms, and systems to extract knowledge and insights from structured and unstructured data.\"\n  },\n   {\n    \"front\": \"Name the key steps in the Data Science process.\",\n    \"back\": \"1. Problem Definition\\n2. Data Collection\\n3. Data Cleaning & Preprocessing\\n4. Exploratory Data Analysis (EDA)\\n5. Model Building\\n6. Model Evaluation\\n7. Deployment & Monitoring\"\n  },\n   {\n    \"front\": \"What is Machine Learning?\",\n    \"back\": \"A subset of AI that allows computers to learn from data without explicit programming, enabling predictions or decisions.\"\n  },\n  {\n    \"front\": \"Differentiate between supervised and unsupervised learning.\",\n    \"back\": \"Supervised learning uses labeled data, while unsupervised learning uses unlabeled data to find patterns.\"\n   },\n    {\n      \"front\":\"What is Deep Learning?\",\n      \"back\":\"A subfield of machine learning using artificial neural networks with multiple layers to extract complex patterns.\"\n    },\n   {\n    \"front\": \"What is Feature Engineering?\",\n    \"back\": \"The process of selecting, transforming, and creating relevant features from raw data to improve model performance.\"\n    },\n   {\n    \"front\": \"Define Exploratory Data Analysis (EDA).\",\n    \"back\": \"The process of using visualizations and summary statistics to explore data, discover patterns, and identify anomalies.\"\n   },\n  {\n    \"front\": \"What is the purpose of Data Visualization?\",\n    \"back\": \"To communicate data insights effectively through charts, graphs, and other visual representations.\"\n    },\n  {\n     \"front\": \"What is a Confusion Matrix?\",\n    \"back\": \"A table that summarizes the performance of a classification model by showing the counts of true positives, true negatives, false positives, and false negatives.\"\n  },\n  {\n    \"front\": \"Name two common Python libraries for Data Science.\",\n    \"back\": \"Pandas (for data manipulation) and NumPy (for numerical computation)\"\n  },\n  {\n     \"front\": \"What is a regression problem?\",\n     \"back\":\"A type of supervised learning problem where the goal is to predict a continuous numerical value.\"\n  },\n  {\n    \"front\": \"What is a classification problem?\",\n    \"back\": \"A type of supervised learning problem where the goal is to predict a categorical label or class.\"\n  },\n  {\n    \"front\": \"What is overfitting?\",\n    \"back\": \"When a model learns the training data too well, including noise, and performs poorly on unseen data.\"\n   },\n  {\n      \"front\":\"What is cross-validation?\",\n      \"back\":\"A technique for evaluating a model's performance by splitting the data into multiple folds and training/testing iteratively.\"\n   },\n    {\n     \"front\":\"What is Data Wrangling?\",\n     \"back\":\"The process of transforming and mapping data from one raw data format to another format for ease of use.\"\n    }\n\n]\n```\n"},
          ],
        },
      ],
    })

    export const generatequiz = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate quiz on the topic C# with question  and options along with correct answer in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"quizTitle\": \"C# Programming Quiz\",\n  \"questions\": [\n    {\n      \"questionId\": 1,\n      \"questionText\": \"Which keyword is used to declare a constant in C#?\",\n      \"options\": [\n        \"a) static\",\n        \"b) const\",\n        \"c) readonly\",\n        \"d) final\"\n      ],\n      \"correctAnswer\": \"b\"\n    },\n    {\n      \"questionId\": 2,\n       \"questionText\": \"What is the purpose of the 'using' statement in C#?\",\n      \"options\": [\n        \"a) To define a new namespace.\",\n        \"b) To import a namespace for easier access to its members.\",\n        \"c) To create a class alias.\",\n        \"d) To declare a variable.\"\n      ],\n       \"correctAnswer\": \"b\"\n    },\n     {\n      \"questionId\": 3,\n      \"questionText\": \"Which data type is used to represent a single character in C#?\",\n      \"options\": [\n        \"a) string\",\n        \"b) char\",\n         \"c) character\",\n        \"d) text\"\n      ],\n       \"correctAnswer\": \"b\"\n    },\n    {\n      \"questionId\": 4,\n      \"questionText\": \"What is the role of the 'virtual' keyword in C#?\",\n      \"options\": [\n        \"a) It prevents inheritance.\",\n        \"b) It makes a method static.\",\n        \"c) It allows a method to be overridden in a derived class.\",\n        \"d) It defines a constant value.\"\n      ],\n      \"correctAnswer\": \"c\"\n    },\n    {\n      \"questionId\": 5,\n      \"questionText\": \"Which of the following is NOT a valid access modifier in C#?\",\n      \"options\": [\n        \"a) public\",\n        \"b) private\",\n        \"c) protected\",\n         \"d) internal_only\"\n      ],\n      \"correctAnswer\": \"d\"\n    },\n    {\n      \"questionId\": 6,\n      \"questionText\": \"What is the purpose of the 'finally' block in a try-catch-finally statement?\",\n        \"options\": [\n          \"a) It handles the exception if it occurs.\",\n          \"b) It always executes after the try block, whether or not an exception is thrown.\",\n           \"c) It allows the program to terminate.\",\n          \"d) It is optional and does not perform any action.\"\n        ],\n      \"correctAnswer\": \"b\"\n    },\n    {\n       \"questionId\": 7,\n       \"questionText\": \"What is the purpose of the 'sealed' keyword in C#?\",\n        \"options\": [\n          \"a) It allows a class to be inherited.\",\n           \"b) It prevents a class from being inherited.\",\n          \"c) It creates an abstract class.\",\n          \"d) It creates a static class.\"\n        ],\n        \"correctAnswer\": \"b\"\n    },\n     {\n      \"questionId\": 8,\n      \"questionText\": \"What is boxing in C#?\",\n        \"options\": [\n          \"a) Converting a value type to a reference type.\",\n          \"b) Converting a reference type to a value type.\",\n          \"c) Creating a new object.\",\n           \"d) Deleting memory\"\n        ],\n        \"correctAnswer\": \"a\"\n      },\n       {\n       \"questionId\": 9,\n       \"questionText\": \"Which of these is a correct way to write a single-line comment in C#?\",\n       \"options\": [\n          \"a) // This is a comment\",\n          \"b) /* This is a comment */\",\n          \"c) -- This is a comment\",\n         \"d) # This is a comment\"\n        ],\n      \"correctAnswer\": \"a\"\n      },\n     {\n        \"questionId\": 10,\n        \"questionText\": \"What does LINQ stand for in C#?\",\n        \"options\": [\n          \"a) Language Integrated Number Query\",\n          \"b) Language Independent Navigation Query\",\n          \"c) Language Integrated Query\",\n          \"d) Logic and Input Navigator Query\"\n         ],\n        \"correctAnswer\": \"c\"\n     }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });

    export const Generateqa = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "generate question and answer for the topic c++ ..return in json format\n..it should contain only question and answer\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"questions\": [\n    {\n      \"id\": 1,\n      \"question\": \"What is the purpose of the `iostream` header file in C++?\",\n      \"answer\": \"The `iostream` header file provides the necessary components for input and output operations in C++. It includes classes like `cin` for standard input, `cout` for standard output, `cerr` for standard error output, and others that facilitate interaction with the user and the console.\"\n    },\n     {\n      \"id\": 2,\n      \"question\": \"Explain the difference between `int`, `float`, and `double` data types in C++.\",\n      \"answer\": \" - `int`: Represents integers (whole numbers) and generally occupies 4 bytes of memory.\\n - `float`: Represents single-precision floating-point numbers (numbers with decimal points) and typically occupies 4 bytes of memory. It has a lower precision compared to double.\\n - `double`: Represents double-precision floating-point numbers and typically occupies 8 bytes of memory. It provides higher precision than `float` and is generally preferred for calculations requiring better accuracy.\"\n     },\n    {\n      \"id\": 3,\n      \"question\": \"What are pointers in C++ and how are they used?\",\n      \"answer\": \"Pointers in C++ are variables that store memory addresses. They are used to access and manipulate data directly in memory. Pointers allow for dynamic memory allocation, passing parameters by reference, creating data structures like linked lists, and implementing more complex algorithms.\"\n    },\n     {\n      \"id\": 4,\n      \"question\": \"What is a class in C++?\",\n      \"answer\": \"In C++, a class is a user-defined data type that combines data (member variables) and functions (member methods) into a single entity. Classes are the fundamental building blocks of object-oriented programming (OOP). They encapsulate data and behavior, promoting code reusability, modularity, and abstraction.\"\n    },\n    {\n      \"id\": 5,\n      \"question\": \"What is the difference between `public`, `private`, and `protected` access specifiers in a C++ class?\",\n      \"answer\": \"Access specifiers in a C++ class control the visibility and accessibility of class members:\\n- `public`: Members declared as public can be accessed from anywhere, both within and outside the class.\\n- `private`: Members declared as private can only be accessed within the class itself. They are not accessible from outside.\\n- `protected`: Members declared as protected can be accessed within the class itself and by its derived (child) classes. They are not directly accessible from outside.\"\n    },\n      {\n      \"id\": 6,\n      \"question\": \"Explain the concept of inheritance in C++.\",\n      \"answer\": \"Inheritance in C++ is a mechanism that allows a class (child/derived class) to inherit properties and behaviors (member variables and methods) from another class (parent/base class). It promotes code reusability and establishes a hierarchical relationship between classes. Inheritance enables polymorphism and allows for the creation of specialized classes based on more general ones.\"\n    },\n    {\n      \"id\": 7,\n      \"question\": \"What is polymorphism in C++ and how is it achieved?\",\n      \"answer\": \"Polymorphism means 'many forms'. In C++, polymorphism allows objects of different classes to respond to the same method call in their own specific way. It can be achieved through:\\n- Function Overloading (compile-time polymorphism): Creating multiple functions with the same name but different parameters within the same scope.\\n- Function Overriding (run-time polymorphism): Creating functions with the same name and signature in a derived class that are already present in the base class. This requires virtual functions.\"\n    },\n       {\n      \"id\": 8,\n      \"question\": \"What are templates in C++?\",\n      \"answer\": \"Templates in C++ are a feature that enables you to write generic code, which can work with different data types without having to rewrite the code for each type. They are used to create functions or classes that can operate on various data types. Templates enhance code reusability and reduce redundancy.\"\n    },\n       {\n      \"id\": 9,\n      \"question\": \"What is the purpose of the `new` and `delete` operators in C++?\",\n      \"answer\": \"The `new` operator is used for dynamic memory allocation, i.e., allocating memory during runtime. It allocates memory on the heap and returns a pointer to the allocated memory block. The `delete` operator is used to deallocate the memory that was previously allocated using `new`. It is crucial to use `delete` to avoid memory leaks. For arrays, `delete[]` is used.\"\n    },\n     {\n      \"id\": 10,\n        \"question\": \"What are constructors and destructors in C++?\",\n       \"answer\": \" \\n- **Constructors:** Constructors are special member functions that are automatically called when an object of a class is created. They are used to initialize the object's data members. A constructor has the same name as the class and does not have a return type (not even void). Classes can have multiple constructors (overloaded constructors).\\n- **Destructors:** Destructors are special member functions that are automatically called when an object goes out of scope (when the object is no longer needed). They are used to release resources held by the object, such as dynamically allocated memory. A destructor has the same name as the class, preceded by a tilde (~). A class has only one destructor, and it does not have any arguments.\"\n    }\n  ]\n}\n```\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "generate question and answer for the topic c++ ..return in json format\n..it should contain only question and answer..no id\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"questions\": [\n    {\n      \"id\": 1,\n      \"question\": \"What is the Standard Template Library (STL) in C++?\",\n      \"answer\": \"The STL is a collection of template classes and functions that provide commonly used algorithms and data structures in C++. It includes containers (like vectors, lists, maps), algorithms (like sorting, searching), and iterators to access and manipulate data.\"\n    },\n    {\n      \"id\": 2,\n      \"question\": \"Explain the purpose of the `std::vector` container in C++.\",\n      \"answer\": \"The `std::vector` is a dynamic array, a sequence container that can grow or shrink in size during runtime. It provides efficient access to its elements by index and supports operations like adding and removing elements.\"\n    },\n    {\n      \"id\": 3,\n      \"question\": \"What are iterators in C++ and how are they used with STL containers?\",\n      \"answer\": \"Iterators are objects that provide a way to traverse the elements of a container. They act like generalized pointers that can move to the next or previous element. Iterators are used with STL containers to access and manipulate elements in a generic way without having direct knowledge of the underlying container's implementation.\"\n    },\n    {\n      \"id\": 4,\n      \"question\": \"What is the purpose of the `std::map` container in C++?\",\n      \"answer\": \"The `std::map` is an associative container that stores elements in key-value pairs. Keys must be unique, and the map automatically sorts them according to the key's ordering. It is optimized for efficient searching, insertion, and deletion based on keys.\"\n    },\n    {\n      \"id\": 5,\n       \"question\": \"What is function overloading in C++ and how is it different from function overriding?\",\n       \"answer\": \"Function overloading allows defining multiple functions with the same name but different parameter lists (number, type, or order of arguments) within the same scope. The compiler chooses which version to call based on the arguments provided. Function overriding occurs when a derived class provides a different implementation of a virtual function already defined in its base class. It is a runtime mechanism.\"\n    },\n    {\n      \"id\": 6,\n      \"question\": \"What are virtual functions in C++ and why are they used?\",\n      \"answer\": \"Virtual functions are member functions of a base class that are declared with the `virtual` keyword. They allow derived classes to override the base class's implementation, achieving runtime polymorphism. When you call a virtual function through a base class pointer or reference, the actual function executed is based on the object's actual type at runtime, not the type of pointer or reference.\"\n    },\n        {\n      \"id\": 7,\n      \"question\": \"What is the purpose of the `const` keyword in C++?\",\n       \"answer\": \"The `const` keyword is used to declare that a variable, function parameter, or member function cannot be modified after initialization or execution. It is a way to enforce data immutability and is a crucial part of writing safe, reliable, and easier to understand code. `const` objects can only call `const` member functions.\"\n     },\n     {\n        \"id\": 8,\n        \"question\": \"What are header files in C++ and why are they used?\",\n        \"answer\": \"Header files in C++ typically contain declarations of functions, classes, and variables. They are included in source files using the `#include` directive. Header files allow the separation of declarations from implementations, promoting modularity, code organization, and code reusability. They prevent the need for recompiling everything when changes are made to the definitions of functions or classes. By including a header file, the compiler gains necessary information about the declarations used.\"\n"},
          ],
        },
        {
          role: "user",
          parts: [
            {text: "generate question and answer for the topic c++ ..return in json format\n..it should contain only question and answer..no id\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"questions\": [\n    {\n      \"question\": \"What is the difference between pass-by-value and pass-by-reference in C++?\",\n      \"answer\": \"Pass-by-value creates a copy of the argument, and changes made to the parameter inside the function do not affect the original variable. Pass-by-reference passes the memory address of the argument, so changes made to the parameter inside the function directly affect the original variable. References are essentially aliases for existing variables.\"\n    },\n    {\n      \"question\": \"Explain the concept of namespaces in C++.\",\n      \"answer\": \"Namespaces are used to organize code into logical groups and prevent naming conflicts. They create a separate scope where identifiers can be defined without clashing with identifiers in other scopes. Namespaces help with code modularity, readability and maintainability by avoiding name collisions when using libraries or multiple code modules.\"\n    },\n        {\n      \"question\": \"What is operator overloading in C++?\",\n      \"answer\": \"Operator overloading allows you to redefine the behavior of operators (like +, -, *, /, etc.) for user-defined types (classes). This allows you to use operators with your class objects in an intuitive way, which can make your code more readable and expressive. It lets the programmer define their own operation for the standard C++ operators.\"\n    },\n     {\n      \"question\": \"What is the purpose of the `this` pointer in C++?\",\n      \"answer\": \"The `this` pointer is a pointer to the current object for which a member function is being called. It allows an object to access its own member variables and methods. It's implicitly passed as a hidden argument to every non-static member function. It is often used when a member function needs to access its own data or when the member function needs to return a reference to its object.\"\n    },\n    {\n      \"question\": \"What is exception handling in C++ and why is it important?\",\n        \"answer\": \"Exception handling is a mechanism that allows you to handle runtime errors and exceptions in a structured way. The `try`, `catch` and `throw` keywords are used to define blocks where errors can be detected, and appropriate error handling code can be executed. It is important for writing robust and reliable software because it prevents program crashes due to unexpected errors and provides a way to handle errors gracefully, potentially recovering from failures instead of immediately terminating the application.\"\n    },\n      {\n      \"question\": \"What is the difference between `#include <filename.h>` and `#include \\\"filename.h\\\"`?\",\n      \"answer\": \"`#include <filename.h>` searches for the header file in the system's include directories, typically used for standard library headers. `#include \\\"filename.h\\\"` searches for the header file in the current project directory first, and if not found, then in the system include directories, used for project-specific headers.\"\n    },\n    {\n      \"question\": \"Explain the concept of friend functions in C++?\",\n        \"answer\": \"A friend function is a function that is not a member of a class but has access to the class's private and protected members. It is declared within the class using the `friend` keyword. Friend functions are often used for operator overloading or when a function needs to access the internal state of multiple classes.\"\n    },\n    {\n      \"question\": \"What is the purpose of the `static` keyword in C++?\",\n       \"answer\": \"The `static` keyword has different meanings depending on the context: \\n- When used with a member variable inside a class, it makes that variable a class-level variable shared by all objects of that class. \\n- When used with a member function, it makes it a class-level method, that can be invoked without an object instance. \\n- When used with a local variable inside a function, it preserves the variable's value between function calls. \\n- When used with global variables or functions, it limits their visibility to the file in which they're defined.\"\n    },\n    {\n       \"question\": \"What is a pure virtual function and an abstract class in C++?\",\n      \"answer\": \"A pure virtual function is a virtual function declared in a base class with the `= 0` initializer. It has no implementation in the base class and must be implemented in a derived class that wants to be concrete (non-abstract). A class containing at least one pure virtual function is called an abstract class. Abstract classes cannot be instantiated. They are used as interfaces to represent a common base for a set of classes and to force derived classes to implement certain functions.\"\n    },\n    {\n        \"question\":\"What is RTTI (Run-Time Type Information) in C++ and how is it used?\",\n        \"answer\":\"RTTI is a mechanism in C++ that allows the type of an object to be determined at runtime. It's primarily used through `dynamic_cast` and `typeid`. `dynamic_cast` attempts to convert a pointer or reference to another pointer or reference within the same inheritance hierarchy, and returns null (for pointers) or throws an exception if the conversion is invalid. `typeid` is an operator that returns a `std::type_info` object describing the type of its operand. RTTI allows you to work with base class pointers while still knowing the actual type of the object at runtime.\"\n     }\n  ]\n}\n```\n"},
          ],
        },
      ],
    });
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());

  